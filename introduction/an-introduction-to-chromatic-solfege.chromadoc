// Names of Toolkits
// chtk ... Chromatic Tool Kit (CHTK)
// ditk ... Diatonic Interval Tool Kit (DITK)
// eitk ... Enharmonic Interval Tool kit(EITK)
// fctk ... Fret-diagram Chromatic Tool kit(FCTK)

// Common Constant Values
var MSG_HARMONIC_TO_ENHARMONIC = 'Harmonic First, Enharmonic Last';
var MSG_ENHARMONIC_TO_HARMONIC = 'Enharmonic First, Harmonic Last';
var COMMON_WORD_01 = "Read them aloud repeatedly until you can recite. ";

t_abstract`
        In modern music, many compositions are polymodal; there may be some 
        difficulty to symbolize those compositions in traditional musical 
        notation system such as Solfège. In order to symbolize those 
        composition precisely, Chromatic-Solfège can be helpful.

        Chromatic-Solfège is a variant of Solfège. While Solfège is based on
        a diatonic scale, the Chromatic-Solfège is based on the chromatic 
        scale. This article will introduce Chromatic-Solfège and comprehensive 
        exercise patterns to build fluency with the new note naming rule by 
        mathematically permutating all possible intervals.
        
        Not only does this article provide written materials, it also provides 
        audible materials. All exercises in this article are automatically 
        converted to singing voice data. It takes approximately one hour to 
        listen through every exercise.
        `;

writeNewPage();
writeTOC();
writeNewPage();

t_header0`Introduction`;
t_textBody`
        In the diatonic based interval system, there are several  
        \textbf{irregular} notes such as C\cflat, F\cflat, E\csharp and 
        B\csharp. C\cflat is practically B\cnatural but there are certain 
        reasons to write it as C\cflat. 
        
        For example, the note a perfect 4th interval above G\cflat is C\cflat; 
        if the note is written as B\cnatural, the interval from G\cflat would 
        be an augmented 3rd, not the perfect 4th.

        In this case, the note a perfect 4th interval above the G\cflat is 
        said to be \textbf{enharmonically equivalent} with B\cnatural.
        The note a perfect 4th interval above the G\cflat is said to be 
        \textbf{harmonically} C\cflat.

        In music nowadays, most tunes are played in equal temperament.  
        Especially in jazz music in 1980’s or later, the scales are premised 
        equal temperament. Jazz musicians are modulate their tonality during 
        their improvisation. They are swapping around all of the notes they 
        play by enharmonic equivalency.

        Chromatic-Solfège plays great role in this situation. 

        Since the traditional Solfège is based on diatonic scale, you need 
        some extra syllables to say their note names such as D-flat, E-flat; 
        this causes some complication to read the music.

        This is where Chromatic-Solfège comes in. Chromatic-Solfège can say 
        them in less syllables so that it gives you better understanding to
        enharmonicity and polymodality.
        
        In practical world, harmonic correctness is often intentionally 
        disregarded because it does not employ how to play on musical 
        instruments; the modern musical instruments are based on equal 
        temperament. Though the note that a player should play is harmonically 
        C\cflat, the player has to manipulate their instrument as if the note 
        is B\cnatural. Therefore, it is also common to prioritise 
        enharmonicity than harmonicity when symbolizing music.

        There are many inconsistently written notes in practical world. In
        order to obtain faster reading ability, let’s name all
        the intervals chromatically, and then enumerate all the possible
        irregular intervals, and we categorize them into three classes, and
        train ourselves to build fluency to the irregularity.
    `;

writeNewPage();

writeHeader0( "Notes" );
{
    t_textBody`
        This section introduces all of note names in Chromatic-Solfège.
        ${COMMON_WORD_01}
    `;

    writeHeader1( "Natural" );
    writeTextBody( 'Every diatonic note in Chromatic-Solfège is named in the same manner as the traditional Solfège. ' );
    writeScore(  "example", "@do  do  re mi fa sol la ti do" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

    writeHeader1( "Flat" );
    writeTextBody( 'Every flatted note alters its name; the vowel part of the name is replaced with “\\textit{E}” unless it is already “\\textit{E}”. In that case it is replaced with “\\textit{A}”. ' );
    writeScore(  "example", "@do  de  ra me fe se  le te de" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

    writeHeader1( "Sharp" );
    writeTextBody( 'Every sharped note alters its name; the vowel part of the name is replaced with “\\textit{I}” unless it is already “\\textit{I}”. In that case it is replaced with “\\textit{A}”. ' );
    writeScore(  "example", "@do  di  ri ma fi si  li ta di" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

    writeHeader1( "Double Flat" );
    writeTextBody( 'Every double-flatted note alters its name; the vowel part of the name is replaced with “\\textit{AW}”. ' );
    writeScore(  "example", "@do  daw raw maw faw saw law taw daw" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

    writeHeader1( "Double Sharp" );
    writeTextBody( 'Every double-sharped note alters its name; the vowel part of the name is replaced with “\\textit{AI}”. ' );
    writeScore(  "example", "@do  dai rai mai fai sai lai tai dai" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

    writeHeader1( "Triple Flat" );
    writeTextBody( 'Every triple-flatted note alters its name; the vowel part of the name is replaced with “\\textit{AE}”. ' );
    writeScore(  "example", "@do  dae  rae mae fae sae lae tae dae" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

    writeHeader1( "Triple Sharp" );
    writeTextBody( 'Every triple-sharped note alters its name; the vowel part of the name is replaced with “\\textit{AO}”. ' );
    writeScore(  "example", "@do  dao  rao mao fao sao lao tao dao" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

    writeHeader1( "Quadruple Flat" );
    writeTextBody( 'Quadruple flatted notes can be occured in a few rare cases. Every quadruple-flatted note alters its name; the vowel part of the name is replaced with “\\textit{AES}”. ' );
    writeScore(  "example", "@do  daes  raes maes faes saes laes taes daes" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );

    writeHeader1( "Quadruple Sharp" );
    writeTextBody( 'Quadruple sharped notes can be occured in a few rare cases. Every quadruple-sharped note alters its name; the vowel part of the name is replaced with “\\textit{AOS}”. ' );
    writeScore(  "example", "@do  daos  raos maos faos saos laos taos daos" , { texGraphicWidth : 0.8 , lyTextAfter : [5,3]} );
}

writeHeader0( "Chromatic Scales" );
{
    writeTextBody( `
        There are two kinds of chromatic scales; diminished chromatic scale and augmented chromatic scale.
    `);

    writeHeader1( "Ascending Chromatic Scale" );
    writeScore( "example-sharp", "@do  do  di re ri mi fa fi sol si la li ti do" );
    writeHeader1( "Descending Chromatic Scale" );
    writeScore( "example-sharp", "@do  do' ti te la le sol se fa mi me re ra do" );

    writeHeader1( "Exercise for Ascending and Descending Chromatic Scale" );
    writeTextBody( `
        The diminished chromatic scale is used when the melody is descending; 
        the augment chromatic scale is used when the melody is ascending.
    `);
    writeScore( "example-sharp", "@do  do di re ri mi fa fi sol si la li ti do | do ti te la le sol se fa mi me re ra do" );

    writeHeader1( "Excercises" );
    writeScore( "example-sharp", "@do  do di re ri mi fa fi sol si la li ti do |  do ti te la le sol se fa mi me re ra do" );
    writeScore( "example-sharp", "@do  di re ri mi fa fi sol si la li ti do di |  ra do ti te la le sol se fa mi me re ra" );
    writeScore( "example-sharp", "@do  re ri mi fa fi sol si la li ti do di re |  re ra do ti te la le sol se fa mi me re" );
    writeScore( "example-sharp", "@do  ri mi fa fi sol si la li ti do di re ri |  me re ra do ti te la le sol se fa mi me" );
    writeScore( "example-sharp", "@do  mi fa fi sol si la li ti do di re ri mi |  mi me re ra do ti te la le sol se fa mi" );
    writeScore( "example-sharp", "@do  fa fi sol si la li ti do di re ri mi fa |  fa mi me re ra do ti te la le sol se fa" );
    writeScore( "example-sharp", "@do  fi sol si la li ti do di re ri mi fa fi |  se fa mi me re ra do ti te la le sol se" );
    writeScore( "example-sharp", "@do sol si la li ti do di re ri mi fa fi sol | sol se fa mi me re ra do ti te la le sol" );
    writeScore( "example-sharp", "@do  si la li ti do di re ri mi fa fi sol si |  le sol se fa mi me re ra do ti te la le" );
    writeScore( "example-sharp", "@do  la li ti do di re ri mi fa fi sol si la |  la le sol se fa mi me re ra do ti te la" );
    writeScore( "example-sharp", "@do  li ti do di re ri mi fa fi sol si la li |  te la le sol se fa mi me re ra do ti te" );
    writeScore( "example-sharp", "@do  ti do di re ri mi fa fi sol si la li ti |  ti te la le sol se fa mi me re ra do ti" );
    writeScore( "example-sharp", "@do  do di re ri mi fa fi sol si la li ti do |  do ti te la le sol se fa mi me re ra do" );

    /*
    writeScore( "example-flat",  "@do  do ra re me mi fa se sol le la te ti do | do ti te la le sol se fa mi me re ra do" );
    writeScore( "example-sharp", "@do  do di re ri mi fa fi sol si la li ti do | do ti li la si sol fi fa mi ri re di do" );
    */
}



// Chromatic Tool Kit (CHTK)
var chtk = {
    build_octaves( arr ) {
        return [].concat( 
            arr.map( (s)=> s + ""      ),
            arr.map( (s)=> s + "'"     ),
            arr.map( (s)=> s + "''"    ),
            arr.map( (s)=> s + "'''"   ),
            arr.map( (s)=> s + "''''"  ),
            arr.map( (s)=> s + "'''''" )
        )
    },
    exec( id, scale, pattern, breakAt ) {
        if ( typeof scale === 'string' )
            scale = scale.split( /\s+/ );
        if ( typeof pattern === 'string' )
            pattern = pattern.split( /\s+/);

        var octaved_scale = chtk.build_octaves( scale );
        var result = '';

        function getNote( idx ) {
            return octaved_scale[ idx % octaved_scale.length ];
        }
        function addResult( ss ) {
            result+= ss;
        }
        function outputResult() {
            result = "\\absolute { " + result + " } ";
            writeScore( id, result, {scmFestivalTempo:170}  );
        }
        function resetResult() {
            result = '\\abs @do\' ';
        }

        resetResult();
        for ( var i=0; i<scale.length; i++ ) {
            if ( i!=0 )
                addResult( ' ' );
            if ( i % breakAt == 0 && i!=0 )
                addResult( ' |! ' );
            for ( var px=0; px<pattern.length; px++ )
                addResult( getNote( i + pattern[px] ) + '4 ' );

            addResult( ' s ' );
        }

        addResult( "do'2 r2 " );
        outputResult();
        resetResult();

        invertedLength = ( scale.length  );
        for ( var i=0; i<scale.length; i++ ) {
            if ( i!=0 )
                addResult( ' ' );
            if ( i % breakAt == 0 && i!=0)
                addResult( ' |! ' );
            for ( var px=0; px<pattern.length; px++ )
                addResult( getNote( invertedLength - i + pattern[px] ) + '4 ' );
            addResult( ' s ' );
        }
        addResult( " do2 r2" );
        outputResult();
        resetResult();
    },
};

t_header0`Understanding Alterations`;
t_textBody`In this section, two exercises to build fluency with the relation between note names are shown. ${COMMON_WORD_01} `;

{
    // Chromatic Scale 1
    writeHeader1( "Horizontal Movement" );
    {
        writeHeader2( "Flat Chromatic Scale" );
        writeScore( "chromatic-02-flat",     "do  do ra re me mi fa se sol le la te ti do | do ti te la le sol se fa mi me re ra do" );

        writeHeader3( "Exercises for Flat Chromatic Scale" );
        chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 0, 1, 0 ],  6 );
        chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 0, 1, 2 ],  6 );
        chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 2, 1, 0 ],  6 );
        chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 0, 1, 2, 3 ],  6 );
        chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 3, 2, 1, 0 ],  6 );
        chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 0, 1, 2, 3, 4 ],  6 );
        chtk.exec( 'chromatic-03-01', 'do ra re me mi fa se sol le la te ti', [ 4, 3, 2, 1, 0 ],  6 );

        writeHeader2( "Sharp Chromatic Scale" );
        writeScore( "chromatic-01-sharp",    "do  do di re ri mi fa fi sol si la li ti do | do ti li la si sol fi fa mi ri re di do" );

        writeHeader3( "Exercises for Sharp Chromatic Scale" );
        chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 0, 1, 0 ],  6 );
        chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 0, 1, 2 ],  6 );
        chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 2, 1, 0 ],  6 );
        chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 0, 1, 2, 3 ],  6 );
        chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 3, 2, 1, 0 ],  6 );
        chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 0, 1, 2, 3, 4 ],  6 );
        chtk.exec( 'chromatic-03-01', 'do di re ri mi fa fi sol si la li ti', [ 4, 3, 2, 1, 0 ],  6 );
    }

    // Chromatic Scale 2
    writeHeader1( "Vertical Movement" );
    {
        writeHeader2( "Note Alteration" );
        writeScore( "notename-accidentals", 
                "@do  do  di dai dao dai di do s do de daw dae daw de do |! " + 
                "@re  do  di dai dao dai di do s do de daw dae daw de do |! " + 
                "@mi  do  di dai dao dai di do s do de daw dae daw de do |! " + 
                "@fa  do  di dai dao dai di do s do de daw dae daw de do |! " + 
                "@sol do  di dai dao dai di do s do de daw dae daw de do |! " + 
                "@la  do  di dai dao dai di do s do de daw dae daw de do |! " + 
                "@ti  do  di dai dao dai di do s do de daw dae daw de do |! " + 
                "@do  do  di dai dao dai di do s do de daw dae daw de do |! " 
            );

        writeHeader2( "Scale Alteration" );
        writeScore( "notename-accidentals", 
                "@do  do  re mi fa sol la ti do       | do ti la sol fa mi re do |! " + 

                "@do  di ri ma fi si li ta di         | di ta li si fi ma ri di   |! " +
                "@do  dai rai mai fai sai lai tai dai | dai tai lai sai fai mai rai dai |! " +
                "@do  dao rao mao fao sao lao tao dao | dao tao lao sao fao mao rao dao |! "  +
                "@do  dai rai mai fai sai lai tai dai | dai tai lai sai fai mai rai dai |! " +
                "@do  di ri ma fi si li ta di         | di ta li si fi ma ri di  |! " +

                "@do  do re mi fa sol la ti do        | do ti la sol fa mi re do |! " + 

                "@do  de  ra me fe se le te de         | de te le se  fe me ra de |! " + 
                "@do  daw raw maw faw saw law taw daw | daw taw law saw faw maw raw daw |! " + 
                "@do  dae rae mae fae sae lae tae dae | dae tae lae sae fae mae rae dae |! "  +
                "@do  daw raw maw faw saw law taw daw | daw taw law saw faw maw raw daw |! " + 
                "@do  de ra me fe se le te de         | de te le se  fe me ra de |! " + 

                "@do  do re mi fa sol la ti do        | do ti la sol fa mi re do |! " + 
                ""
            );
    }
}

writeHeader0( `Enharmonically Equivalent Notes` );
writeTextBody( `
        In this section, some of exercises to build fluency with
        harmonically equivalent notes are presented. In order to understand
        the complexity of the traditional musical notation system, the
        exercises help to acquire some view points to see the reason why
        the complexity occurs.
        `);
{
    // Enharmonicity 1
    writeHeader1( "Flat, Sharp and Natural" );
    {
        writeHeader3( MSG_HARMONIC_TO_ENHARMONIC );
        writeScore( "enharmonic-single-accidentals-sf", "do " +
              "di ra  s  ri me  s  mi fe  s  ma fa  s  fi se  s  si le  s  li te  s  ti de  s  ta do  s  di ra |! " +
              "di ra  s  ta do  s  ti de  s  li te  s  si le  s  fi se  s  ma fa  s  mi fe  s  ri me  s  di ra"
        );
        writeHeader3( MSG_ENHARMONIC_TO_HARMONIC );
        writeScore( "enharmonic-single-accidentals-fs", "do " +
              "ra di  s  me ri  s  fe mi  s  fa ma  s  se fi  s  le si  s  te li  s  de ti  s  do ta  s  ra di |! " +
              "ra di  s  do ta  s  de ti  s  te li  s  le si  s  se fi  s  fa ma  s  fe mi  s  me ri  s  ra di"
        );
    }


    writeHeader1( "Double Flat" );
    {
        writeHeader3( MSG_HARMONIC_TO_ENHARMONIC );
        writeScore( "enharmonic-double-flat-fn", "do " +
              "daw te s raw do  s  maw re  s  faw me  s  saw fa  s  law sol  s  taw la  s  daw te   |! " +
              "daw te s taw la  s  law sol s  saw fa  s  faw me  s  maw re   s  raw do  s  daw te " 
        );
        writeHeader3( MSG_ENHARMONIC_TO_HARMONIC );
        writeScore( "enharmonic-double-flat-nf", "do " +
              "te daw  s do raw   s  re maw   s  me faw   s  fa saw   s  sol law   s  la taw   s  te daw    |! " +
              "te daw  s la taw   s  sol law  s  fa saw   s  me faw   s  re maw    s  do raw   s  te daw  " 
        );
    }

    writeHeader1( "Double Sharp" );
    {

        writeHeader3( MSG_HARMONIC_TO_ENHARMONIC );
        writeScore( "enharmonic-double-sharp-sn", "do " +
              "dai re  s  rai mi  s  mai fi  s  fai sol  s  sai la   s  lai ti  s  tai di  s  dai re |! " +
              "dai re  s  tai di  s  lai ti  s  sai la   s  fai sol  s  mai fi  s  rai mi  s  dai re " 
        );

        writeHeader3( MSG_ENHARMONIC_TO_HARMONIC );
        writeScore( "enharmonic-double-sharp-ns", "do " +
              "re dai  s  mi rai  s  fi mai  s  sol fai  s  la sai  s  ti lai  s  di tai  s  re dai |! " +
              "re dai  s  di tai  s  ti lai  s  la sai  s  sol fai  s  fi mai  s  mi rai  s  re dai" 
        );
    }

    writeHeader1( "Triple Flat" );
    {
        writeHeader3( MSG_HARMONIC_TO_ENHARMONIC );
        writeScore( "enharmonic-triple-flat-fn", "do " +
              "dae la  s  rae ti  s mae di  s  fae re   s  sae mi  s  lae fi  s  tae si  s  dae la |! " +
              "dae la  s  tae si  s lae fi  s  sae mi   s  fae re  s  mae di  s  rae ti  s  dae la" 
        );
        writeHeader3( MSG_ENHARMONIC_TO_HARMONIC );
        writeScore( "enharmonic-triple-flat-nf", "do " +
              "la  dae  s  ti  rae  s di  mae  s  re  fae   s  mi  sae  s  fi  lae  s  si  tae  s  la  dae |! " +
              "la  dae  s  si  tae  s fi  lae  s  mi  sae   s  re  fae  s  di  mae  s  ti  rae  s  la  dae" 
        );
    }

    writeHeader1( "Triple Sharp" );
    {
        writeHeader3( MSG_HARMONIC_TO_ENHARMONIC );
        writeScore( "enharmonic-triple-sharp-sn", "do " +
              "dao  me  s  rao  fa  s  mao  sol  s  fao  le  s  sao  te   s  lao  do  s  tao  re  s  dao  me |! " +
              "dao  me  s  tao  re  s  lao  do   s  sao  te  s  fao  le   s  mao  sol s  rao  fa  s  dao  me" 
        );
        writeHeader3( MSG_ENHARMONIC_TO_HARMONIC );
        writeScore( "enharmonic-triple-sharp-ns", "do " +
              "me   dao s  fa   rao   s  sol mao   s  le fao   s  te sao    s  do lao    s  re tao   s  me dao   |! " +
              "me   dao s  re   tao   s  do lao    s  te sao   s  le fao    s  sol mao   s  fa rao   s  me dao  " 
        );
    }
}



writeHeader0( "Harmonically Strict Motions" );
writeTextBody(
        `TODO`
);
{
    writeHeader1( "Strict Fourth Motion" );
    writeScore( "strict-fourth" , "\\abs @do' \\absolute { do fa te me' le ra' se' de fe taw maw' law raw' saw'  daw faw tae mae' lae rae' sae' dae fae }" , {scmFestivalTempo:100} );

    writeHeader1( "Strict Fifth Motion" );
    writeScore( "strict-fifth" ,  "\\abs @do' \\absolute { do sol re' la' mi' ti' fi''  di si ri' li' ma' ta' fai''  dai sai rai' lai' mai' tai' fao''  dao sao rao' lao' mao' tao' la'' }", {scmFestivalTempo:100} );

    writeHeader1( "Strict Minor Third Motion" );
    writeScore( 
            `\
            @do  do  me se taw s
            @di  do, me se taw s
            @re  do, me se taw s |!
            @ri  do, me se taw s 
            @mi  do, me se taw s 
            @fa  do, me se taw s |!
            @fi  do, me se taw s 
            @sol do, me se taw s 
            @si  do, me se taw s |!
            @la  do, me se taw s 
            @li  do, me se taw s 
            @ti  do, me se taw s |!
            @do  do, me se taw s s

            `.replace( /\n|\t\t/g, ' ' )
            );

    writeHeader1( "Strict Minor Third Motion 2" );
    writeScore( 
            `\
            @do \
            do  me se taw s  te sol mi ra  s  re fa le de s |! 
            do  la fi ri  s  mi sol te ra  s  re ti si ma s |! 
            fi  li di mi  s  fa re  ti si  s  la do me se s |! 
            sol mi di li  s  ti re  fa le  s  la fi ri ta  
            `.replace( /\t\t/g, '' ).replace( /\n/g, ' ' )
            );


    writeHeader1( "Fourth Motion" );
    writeScore( 
            "@do  do  fa te, me le  |  " +
            "@ra  do, fa te, me le  |  " +
            "@re  do, fa te, me le  |  " +
            "@me  do, fa te, me le  |! " +

            "@mi  do, fa te, me le  |  " +
            "@fa  do, fa te, me le  |  " +
            "@se  do, fa te, me le  |  " +
            "@sol do, fa te, me le  |! " +

            "@le  do, fa te, me le  |  " +
            "@la  do, fa te, me le  |  " +
            "@te  do, fa te, me le  |  " +
            "@ti  do, fa te, me le  |! " +
            "@do  do1" 
            );

    writeHeader1( "Fifth Motion" );
    writeScore( 
            "@do   do' sol' re' la mi' |  " +
            "@ti   do, sol' re' la mi' |  " +
            "@li   do, sol' re' la mi' |  " +
            "@la   do, sol' re' la mi' |! " +

            "@si   do, sol' re' la mi' |  " +
            "@sol  do, sol' re' la mi' |  " +
            "@fi   do, sol' re' la mi' |  " +
            "@fa   do, sol' re' la mi' |! " +

            "@mi   do, sol' re' la mi' |  " +
            "@ri   do, sol' re' la mi' |  " +
            "@re   do, sol' re' la mi' |  " +
            "@di   do, sol' re' la mi' |! " +
            "@do  do1" 
            );
}



writeHeader0( "Transposing" );
// TODO
writeTextBody( "TODO.");
{
    writeHeader1( "Diatonic Scales" );
    {
        var ch = require( 'chromatic-solfege' );
        function eventhandler( eventtype, id, notes, text ) {
            if ( eventtype == 'tex' ) {
                return (
                    '\\noindent ' + 
                    ch.note2alphabet_tex( id )
                        .replace( /\bflat\b/, "cflat" )
                        .replace( /\bsharp\b/, "csharp" )
                        .replace( /\bnatural\b/, "cnatural" ) +
                    '$\\vcenter{ \\hbox{ \\includegraphics[width=1.0 \\textwidth]{' + this.currentOutputFilenameAsPDF() + '}}}$\n'
               );
            } else {
                return text;
            }
        }

        writeHeader2( "Natural" );
        writeScore( null, "do  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );

        writeHeader2( "Sharp" );
        writeScore( null, "sol do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "re  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "la  do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "mi  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "ti  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "fi  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );

        writeHeader2( "Flat" );
        writeScore( null, "fa  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "te  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "me  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "le  do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "ra  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "se  do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );

        writeHeader2( "Special ( Flat )" );
        writeScore( null, "de  do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "fe  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );

        writeHeader2( "Special ( Sharp )" );
        writeScore( null, "di  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "si  do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "ri  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "li  do' re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "ma  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );
        writeScore( null, "ta  do  re mi fa sol la ti do | do ti la sol fa mi re do", { eventhandler : eventhandler } );


        writeHeader2( "Fourth Motion" );

        writeScore( null, "@do'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@fa'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@te'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@me'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@le'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@ra'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@se'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@de'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@fe'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@taw' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@maw' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@law' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@raw' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@saw' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@daw' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@faw' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@tae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@mae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@lae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@rae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@sae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@dae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@fae' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );
        writeScore( null, "@sol' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do }", { eventhandler : eventhandler } );

        writeHeader2( "Fifth Motion" );

        writeScore( null, "@do'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@sol' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@re'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@la'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@mi'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@ti'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@fi'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@di'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@si'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@ri'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@li'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@ma'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@ta'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@fai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@dai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@sai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@rai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@lai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@mai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@tai' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@fao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@dao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@sao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@rao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@lao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@mao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@tao' \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
        writeScore( null, "@si'  \\abs \\absolute { do re mi fa sol la ti do' | do' ti la sol fa mi re do } ", { eventhandler : eventhandler } );
    }

    writeHeader1( "Harmonically Strict Chromatic Scales" );
    writeTextBody( `\
        Generally chromatic scales are considered that they do not belong
        to any specific key.  Harmonically speaking, the chromatic scales
        also have keys when they come with harmonically correct intervals.
        Chromatic scale 
    ` );
    {
        var note2name = {
            'do' : 'C',
            'fa' : 'F',
            'te' : 'B\\flat',
            'me' : 'E\\flat',
            'le' : 'A\\flat',
            'ra' : 'D\\flat',
            'se' : 'G\\flat',
            'sol': 'G',
            're' : 'D',
            'la' : 'A',
            'mi' : 'E',
            'ti' : 'B',
            'fi' : 'F\\sharp',
        };
        var keys = "do fa te me le ra se ti mi la re sol".split( ' ' );
        for ( var i of keys ) {
            writeHeader2( 'Key ' + note2name[ i ] );
            // TODO
            writeScore( i + '-01', `@${i} do re mi fa sol la ti do do ti la sol fa mi re do` );
            writeScore( i + '-02', `@${i} do di re ri mi fa fi sol si la li ti do s do ti te la le sol se fa mi me re ra do` );
        }
    }
}










// Diatonic Interval Tool Kit (DITK)
var ditk = {
    left_rotate(arr,offset) {
        arr = arr.concat();
        return arr.concat( arr.splice( 0, offset ) );
    },
    build_octaves( arr ) {
        return [].concat( 
            // arr.map( (s)=> s + ","     ),
            arr.map( (s)=> s + ""      ),
            arr.map( (s)=> s + "'"     ),
            arr.map( (s)=> s + "''"    ),
            arr.map( (s)=> s + "'''"   ),
            arr.map( (s)=> s + "''''"  ),
            arr.map( (s)=> s + "'''''" )
        )
    },
    merge_with_offset( notes , offset, from, to  ) {
        var result = [];
        for ( var i=from; i!=to; from < to ? i++ : i-- ) {
            result.push( notes[ ( i          ) ] + '8 [ ' );
            result.push( notes[ ( i + offset ) ] + '8 ] ' );
        }
        result.push( notes[ ( to          ) ] + '8 ] ' );

        return result.join( ' ' ) ;
    },

    merge_with_offset2( notes , offset, from, to  ) {
        var result = [];
        for ( var i=from; i!=to; from < to ? i++ : i-- ) {
            result.push( notes[ ( i          ) ] + '4 ' );
            result.push( notes[ ( i + offset ) ] + '4 s ' );
        }
        result.push( notes[ ( to          ) ] + '2' );

        return result.join( ' ' ) ;
    },
    num2interval( n ) {
        switch ( n )  {
            case  0 : return "Unison";
            case  1 : return "Second";
            case  2 : return "Third";
            case  3 : return "Fourth";
            case  4 : return "Fifth";
            case  5 : return "Sixth";
            case  6 : return "Seventh";
            case  7 : return "Octave";
            case  8 : return "Ninth";
            case  9 : return "Tenth";
            case 10 : return "Eleventh";
            case 11 : return "Twelfth";
            case 12 : return "Thirteenth";
            case 13 : return "Fourteenth";
            case 14 : return "Fifteenth";
            default :
                throw new Error('');
        }
    },
    key2caption( key ) {
        return "key in " + key;
    },
    exec( scale, caption ) {
        writeHeader1( caption ) ;
        for ( var ridx=0; ridx<1; ridx++ ) {
            var scale  = scale.split(' ') ;
            var key    = ditk.left_rotate( scale, ridx ).shift();
            var notes  = ditk.left_rotate( ditk.build_octaves( scale ), ridx );
            var ottava = 4 <= ridx ? '\\ottava #1' : '';

            var pos_s = scale.length;
            var pos_e = scale.length * 2;

            // c.writeHeader2( 'All Intervals within ' + caption ) ;

            /*
             * NOTE : pos_e must be added one because the root note on the next octave must be shown there.
             * (Thu, 07 Jun 2018 12:44:30 +0900)
             */
            writeScore( 'scale', '@do ' + ottava + ' \\absolute { ' + notes.slice( pos_s, pos_e + 1  ).join( ' ' ) + ' | ' + notes.slice( pos_s, pos_e + 1 ).reverse().join( ' ' )  + ' } ' );

            for ( var nidx=0; nidx<8; nidx++ ) {
                writeHeader2( "" + ditk.num2interval( nidx ) + " within " + caption );
                writeScore( nidx + '-01-u', "@do " + ottava + " \\absolute { " +  ditk.merge_with_offset2( notes,  nidx, pos_s ,pos_e ) + " }", {scmFestivalTempo:170} );
                writeScore( nidx + '-02-d', "@do " + ottava + " \\absolute { " +  ditk.merge_with_offset2( notes,  nidx, pos_e ,pos_s ) + " }", {scmFestivalTempo:170} );
            }
        }
    },
};



writeHeader0( "Intervals in Alterations" );
writeTextBody( 
        `
        In this section, all intervals in a diatonic scale and the diatonic
        scale with every possible alterations are comprehensively
        enumerated. These  lists can also be used as exercises which help
        to build fluency for the note names with every possible alterations.
        ` + COMMON_WORD_01 
    );
{
    ditk.exec( "do re mi fa sol la ti", "Natural" );
    ditk.exec( "de ra me fe se le te", "Flat" );
    ditk.exec( "di ri ma fi si li ta", "Sharp" );
    ditk.exec( "daw raw maw faw saw law taw", "Double Flat" );
    ditk.exec( "dai rai mai fai sai lai tai", "Double Sharp" );
    ditk.exec( "dae rae mae fae sae lae tae", "Triple Flat" );
    ditk.exec( "dao rao mao fao sao lao tao", "Triple Sharp" );
}

// Enharmonic Interval Tool kit(EITK)
var eitk = {
    exec ( l_scale, r_scale, rotation, from, to ) {
        if ( typeof l_scale === 'undefined' ) {
            throw new Error( "No scale was specified." );
        }
        if ( typeof r_scale === 'undefined' ) {
            r_scale = l_scale;
        }
        if ( typeof rotation === 'undefined' ) {
            rotation = 0;
        }
        if ( typeof from  === 'undefined' ) {
            from = 0;
        }
        if ( typeof to  === 'undefined' ) {
            to = 13;
        }
        // Enharmonic Chromatic Scale Tool Kit
        var note2name = {
            'do' : 'C',
            'fa' : 'F',
            'te' : 'B\\flat',
            'me' : 'E\\flat',
            'le' : 'A\\flat',
            'ra' : 'D\\flat',
            'se' : 'G\\flat',
            'sol': 'G',
            're' : 'D',
            'la' : 'A',
            'mi' : 'E',
            'ti' : 'B',
            'fi' : 'F\\sharp',
        };
        var intervalNames = [
            'Perfect Unison',
            'Minor Second',
            'Major Second',
            'Minor Third',
            'Major Third',
            'Perfect Fourth',
            'Diminished Fifth',
            'Perfect Fifth',
            'Minor Sixth',
            'Major Sixth',
            'Minor Seventh',
            'Major Seventh',
            'Perfect Octave',
            'Minor Nineth',
            'Major Nineth',
            'Minor Tenth',
            'Major Tenth',
            'Perfect Eleventh',
            'Diminished Twelveth',
            'Perfect Twelveth',
            'Minor Thirteenth',
            'Major Thirteenth',
            'Minor Fourteenth',
            'Major Fourteenth',
        ];
        var numberWords = [
            'zero',
            'one',
            'two',
            'three',
            'four',
            'five',
            'six',
            'seven',
            'eight',
            'nine',
            'ten',
            'eleven',
            'twelve',
            'thirteen',
            'fourteen',
            'fifteen',
            'sixteen',
            'seventeen',
            'eighteen',
            'nineteen',
            'twenty',
        ];
        function number2interval( i ) {
            return intervalNames[ i % intervalNames.length ];
        }
        function number2word( i ) {
            return numberWords[ i ];
        }

        function merge_with_offset( l_notes, r_notes, offset, from, to, size  ) {
            var result = [];
            for ( var i=from; i!=to; from < to ? i++ : i-- ) {
                result.push( l_notes[ ( i          ) ] + '4 ' );
                result.push( r_notes[ ( i + offset ) ] + '4 s ' );
            }
            result.push( l_notes[ ( to          ) ] + '2 ' );

            return result.join( ' ') ;
        }
        function blowup(arr) {
            return [].concat( 
                // arr.map( (s)=> s + ","     ),
                arr.map( (s)=> s + ""      ),
                arr.map( (s)=> s + "'"     ),
                arr.map( (s)=> s + "''"    ),
                arr.map( (s)=> s + "'''"   ),
                arr.map( (s)=> s + "''''"  ),
                arr.map( (s)=> s + "'''''" )
            )
        }

        function rotate(arr,offset) {
            // console.error( 'rotate', offset );
            return arr.concat( arr.splice( 0, offset ) );
        }

        function checkKey( key ) {
            if ( key == 'do' ) {
                return 'natural';
            } else if ( 0<= ( "ti mi la re sol".split( ' ' ).indexOf( key )  ) ) {
                return 'sharp';
            } else if ( 0<= ( "fa te me le ra se".split( ' ' ).indexOf( key )  ) ) {
                return 'flat';
            } else {
                throw new Error( `unknown key ${key}` );
            }
        }

        var l_notes = rotate( blowup( l_scale.split( /\s+/ ) ), rotation ) ;
        var r_notes = rotate( blowup( r_scale.split( /\s+/ ) ), rotation ) ;

        for ( var i=from; i<to; i++ ) {
            writeHeader2( number2interval( i ) + " Which Consists " + number2word( i ) + " Half Step"  + ( 1<i ? 's' : '' ) );
            writeScore( i + '-01-u', "@do' \\absolute \{ " + merge_with_offset( l_notes, r_notes,  i, 12 ,24 , 12 ) + " \}", {scmFestivalTempo:200} );
            writeScore( i + '-02-d', "@do' \\absolute \{ " + merge_with_offset( l_notes, r_notes,  i, 24 ,12 , 12 ) + " \}", {scmFestivalTempo:200} );
        }
    },
};

writeHeader0( "Enharmonic Intervals" );
writeTextBody( 
       `In this section, all enharmonic intervals which intentionally disregard harmonic correctness are shown.`
        + COMMON_WORD_01
    );
{

    // c.writeHeader1( "Enharmonic Intervals on the Chromatic Scale" );
    {
        writeHeader1( 'Intervals in Flat Chromatic Scale' );
        eitk.exec( 'do ra re me mi fa se sol le la te ti' );
        writeHeader1( 'Intervals in Sharp Chromatic Scales' );
        eitk.exec( 'do di re ri mi fa fi sol si la li ti' );

        writeHeader1( 'Intervals from Flat to Sharp' );
        eitk.exec( 'do ra re me mi fa se sol le la te ti', 'do di re ri mi fa fi sol si la li ti' );
        writeHeader1( 'Intervals from Sharp to Flat' );
        eitk.exec( 'do di re ri mi fa fi sol si la li ti', 'do ra re me mi fa se sol le la te ti' );
    }

}

writeHeader0( "Harmonic Intervals" );
writeTextBody(
        "In this section, we will mathmatically permutate every possible combinations of any two notes to reveal every possible absolute intervals. " +
        "In order to acquire the absolute intervals, we transpose every possible relative intervals to every possible keys. " +
        "\n\n" +
        "In modern music, most instruments are equally tempered and thus there are only twelve notes in an octave. " +
        "In musical notation, however, it presumes that there could be instruments which are not based on equal temparaments; " +
        "in such case, semitones vary in size. Therefore it is not possible to assume that flat and sharp are always same size. " +
        "Thus there are two instances of the chromatic scale in the world of musical notation " + 
        "even though the existence of the chromatic scale is always one and only. "+ 
        "\n\n" +
        ""
    );
{
    var scale_s = "do di re ri mi fa fi sol si la li ti".split( ' ' ).map( (s)=> s+"'" ) ;
    var scale_f = "do ra re me mi fa se sol le la te ti".split( ' ' ).map( (s)=> s+"'" ) ;

    function advancedIntervals( interval, caption ) {
        caption = caption.trim().replace( / +/, " " );

        var notes_f = "";
        var notes_s = "";
        var options  = { scmFestivalTempo:170, scmMarkIrregularAccidentals:true };
        for ( var i=0; i<12; i++ ) {
            if ( 0 < i ) {
                notes_f += ' s ';
                notes_s += ' s ';
            }
            notes_f += "@" + scale_f[i] + ' ' + interval;
            notes_s += "@" + scale_s[i] + ' ' + interval;
        }

        // Added the last note to both flat-series and sharp-series.
        notes_f += "@do' s do'";
        notes_s += "@do' s do'";

        writeHeader2( caption + ` ([${interval}])`);
        writeHeader3( caption + " in the Flat Chromatic Scale" );
        writeScore( "advanced-intervals", "\\absolute { \\abs " + notes_f + " } ", options );
        writeHeader3( caption + " in the Sharp Chromatic Scale" );
        writeScore( "advanced-intervals", "\\absolute { \\abs " + notes_s + " } ", options );
    }

    writeHeader1( "Practical Intervals" );

    advancedIntervals( "do de"   , "Diminished Unison"        );
    advancedIntervals( "do do"   , "Perfect    Unison"        );
    advancedIntervals( "do di"   , "Augumented Unison"        );
    advancedIntervals( "do ra"   , "Minor      Second"        );
    advancedIntervals( "do re"   , "Major      Second"        );
    advancedIntervals( "do ri"   , "Augumented Second"        );
    advancedIntervals( "do me"   , "Minor      Third"         );
    advancedIntervals( "do mi"   , "Major      Third"         );
    advancedIntervals( "do ma"   , "Augumented Third"         );
    advancedIntervals( "do fa"   , "Perfect    Fourth"        );
    advancedIntervals( "do fi"   , "Augumented Fourth"        );
    advancedIntervals( "do se"   , "Diminished Fifth"         );
    advancedIntervals( "do sol"  , "Perfect    Fifth"         );
    advancedIntervals( "do si"   , "Augumented Fifth"         );
    advancedIntervals( "do le"   , "Minor      Sixth"         );
    advancedIntervals( "do la"   , "Major      Sixth"         );
    advancedIntervals( "do li"   , "Augumented Sixth"         );
    advancedIntervals( "do te"   , "Minor      Seventh"       );
    advancedIntervals( "do ti"   , "Major      Seventh"       );
    advancedIntervals( "do ta"   , "Augumented Seventh"       );
    advancedIntervals( "do de'"  , "Diminished Octave"        );
    advancedIntervals( "do do'"  , "Perfect    Octave"        );
    advancedIntervals( "do di'"  , "Augumented Octave"        );
    advancedIntervals( "do ra'"  , "Minor      Ninth"         );
    advancedIntervals( "do re'"  , "Major      Ninth"         );
    advancedIntervals( "do ri'"  , "Augumented Ninth"         );
    advancedIntervals( "do me'"  , "Minor      Tenth"         );
    advancedIntervals( "do mi'"  , "Major      Tenth"         );
    advancedIntervals( "do ma'"  , "Augumented Tenth"         );
    advancedIntervals( "do fa'"  , "Perfect    Eleventh"      );
    advancedIntervals( "do fi'"  , "Augumented Eleventh"      );
    advancedIntervals( "do se'"  , "Diminished Twelveth"      );
    advancedIntervals( "do sol'" , "Perfect    Twelveth"      );
    advancedIntervals( "do si'"  , "Augumented Twelveth"      );
    advancedIntervals( "do le'"  , "Minor      Thirteenth"    );
    advancedIntervals( "do la'"  , "Major      Thirteenth"    );
    advancedIntervals( "do li'"  , "Augumented Thirteenth"    );
    advancedIntervals( "do te'"  , "Minor      Fourteenth"    );
    advancedIntervals( "do ti'"  , "Major      Fourteenth"    );
    advancedIntervals( "do ta'"  , "Augumented Fourteenth"    );
    advancedIntervals( "do de'"  , "Diminished Double Octave" );
    advancedIntervals( "do do''" , "Double     Octave"        );

    writeHeader1( "Theoretecal Intervals - Double Diminished" );
    advancedIntervals( "do daw"   , "Double Diminished Unison"        );
    advancedIntervals( "do raw"   , "Double Diminished Second"        );
    advancedIntervals( "do maw"   , "Double Diminished Third"         );
    advancedIntervals( "do faw"   , "Double Diminished Fourth"        );
    advancedIntervals( "do saw"   , "Double Diminished Fifth"         );
    advancedIntervals( "do law"   , "Double Diminished Sixth"         );
    advancedIntervals( "do taw"   , "Double Diminished Seventh"       );
    advancedIntervals( "do daw'"  , "Double Diminished Octave"        );
    advancedIntervals( "do raw'"  , "Double Diminished Ninth"         );
    advancedIntervals( "do maw'"  , "Double Diminished Tenth"         );
    advancedIntervals( "do faw'"  , "Double Diminished Eleventh"      );
    advancedIntervals( "do saw'"  , "Double Diminished Twelveth"      );
    advancedIntervals( "do law'"  , "Double Diminished Thirteenth"    );
    advancedIntervals( "do taw'"  , "Double Diminished Fourteenth"    );

    writeHeader1( "Theoretecal Intervals - Double Augumented" );
    advancedIntervals( "do dai"   , "Double Augumented Unison"        );
    advancedIntervals( "do rai"   , "Double Augumented Second"        );
    advancedIntervals( "do mai"   , "Double Augumented Third"         );
    advancedIntervals( "do fai"   , "Double Augumented Fourth"        );
    advancedIntervals( "do sai"   , "Double Augumented Fifth"         );
    advancedIntervals( "do lai"   , "Double Augumented Sixth"         );
    advancedIntervals( "do tai"   , "Double Augumented Seventh"       );
    advancedIntervals( "do dai'"  , "Double Augumented Octave"        );
    advancedIntervals( "do rai'"  , "Double Augumented Ninth"         );
    advancedIntervals( "do mai'"  , "Double Augumented Tenth"         );
    advancedIntervals( "do fai'"  , "Double Augumented Eleventh"      );
    advancedIntervals( "do sai'"  , "Double Augumented Twelveth"      );
    advancedIntervals( "do lai'"  , "Double Augumented Thirteenth"    );
    advancedIntervals( "do tai'"  , "Double Augumented Fourteenth"    );
}


// c.writeCommands(
//         `
//         \\begin\{tabular\}\{ l | c | r \}
//           1 & 2 & 3 \\\\
//           4 & 5 & 6 \\\\
//           7 & 8 & 9 \\\\
//         \\end\{tabular\}
//         `.replace( /^\s*/, "" )
//         );

writeHeader0( "Scales" );
// TODO
writeTextBody( 
        "This section introduces some exercises to build fluency. " +
        COMMON_WORD_01
    );
{
    // ch-070 =============================================
    // TODO
    writeTextBody( "In this theory, all scales are related to closest minor scale. Rotation is a method to derive all related scales on a scale. (under construction)\\" );
    {
        // BASIC
        writeHeader1( "Basic Scales" );
        writeTextBody( 
                // TODO
                "This section introduces some exercises to build fluency. " +
                COMMON_WORD_01
            );

        writeHeader2( "Dorian Scale" );
        writeScore(  "dorian-basic",                           "do(do,re,me,fa,sol,la,te)        1 2 3 4 5 6 7     1 s 1     7 6 5 4 3 2 1 "  );
        writeHeader2( "Diminished Scale" );
        writeScore(  'diminished-basic',                       "do(do,re,me,fa,se,le,la,ti)      1 2 3 4 5 6 7 8   1 s 1   8 7 6 5 4 3 2 1 "  );
        writeHeader2( "Melodic Minor Scale" );
        writeScore(  'melodic-basic',                          "do(do,re,me,fa,sol,la,ti)        1 2 3 4 5 6 7     1 s 1     7 6 5 4 3 2 1 "  );
        writeHeader2( "Harmonic Minor Scale" );
        writeScore(  'harmonic-basic',                         "do(do,re,me,fa,sol,le,ti)        1 2 3 4 5 6 7     1 s 1     7 6 5 4 3 2 1 "  );
        writeHeader2( "Melodic Minor \\sharp 11 Scale" );
        writeScore(  'melodic-s11-basic',                      "do(do,re,me,fi,sol,la,ti)        1 2 3 4 5 6 7     1 s 1     7 6 5 4 3 2 1 "  );
        writeHeader2( "Wholetone Scale" );
        writeScore(  'wholetone-basic',                        "do(do,re,mi,fi,si,li)            1 2 3 4 5 6       1 s 1       6 5 4 3 2 1 "  );
        writeHeader2( "Augumented Scale" );
        writeScore(  'augmented-basic',                        "do(do,me,mi,sol,le,ti)           1 2 3 4 5 6       1 s 1       6 5 4 3 2 1 "  );
        writeHeader2( "Augumented Minor Major 7th Scale" );
        writeScore(  'augmented-ma7-basic',                    "do(do,re,me,mi,se,sol,le,te,ti)  1 2 3 4 5 6 7 8 9 1 s 1 9 8 7 6 5 4 3 2 1 "  );
        writeHeader2( "Augumented Natural 13th Scale" );
        writeScore(  'augmented-n13-basic',                    "do(do,re,me,mi,se,le,la,te)      1 2 3 4 5 6 7 8   1 s 1   8 7 6 5 4 3 2 1 "  );

        // DORIAN
        writeHeader1( "Dorian Related Scales" );
        writeHeader2( "Dorian Scale" );
        writeScore(  "dorian-01",                  "do(do,re,me,fa,sol,la,te)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );
        writeHeader2( "Phrygian Scale" );
        writeScore(  "dorian-02",                  "do(re,me,fa,sol,la,te,do)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );
        writeHeader2( "Lydian Scale" );
        writeScore(  "dorian-03",                  "do(me,fa,sol,la,te,do,re)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );
        writeHeader2( "Mixolydian Scale" );
        writeScore(  "dorian-04",                  "do(fa,sol,la,te,do,re,me)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );
        writeHeader2( "Aeolian Scale" );
        writeScore(  "dorian-05",                  "do(sol,la,te,do,re,me,fa)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );
        writeHeader2( "Locrian Scale" );
        writeScore(  "dorian-06",                  "do(la,te,do,re,me,fa,sol)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );
        writeHeader2( "Ionian Scale" );
        writeScore(  "dorian-07",                  "do(te,do,re,me,fa,sol,la)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                             );


        // MELODIC
        writeHeader1( "Melodic Minor Related Scales" );

        writeHeader2( "Melodic Minor Scale" );
        writeScore(  "melodic-01",                  "do(do,re,me,fa,sol,la,ti)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );
        writeHeader2( "Phrygian \\natural 13th Scale" );
        writeScore(  "melodic-02",                  "do(re,me,fa,sol,la,ti,do)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );
        writeHeader2( "Lydian \\sharp 5th Scale" );
        writeScore(  "melodic-03",                  "do(me,fa,sol,la,ti,do,re)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );
        writeHeader2( "Mixolydian \\sharp 11th Scale" );
        writeScore(  "melodic-04",                  "do(fa,sol,la,ti,do,re,me)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );
        writeHeader2( "Aeolian Majour Scale ( Mixolydian \\flat 13th )" );
        writeScore(  "melodic-05",                  "do(sol,la,ti,do,re,me,fa)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );
        writeHeader2( "Locrian \\natural 9th Scale ( Super Locrian Scale )" );
        writeScore(  "melodic-06",                  "do(la,ti,do,re,me,fa,sol)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );
        writeHeader2( "Ionian \\flat All Scale ( Altered Scale )" );
        writeScore(  "melodic-07",                  "do(ti,do,re,me,fa,sol,la)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                            );


        // HARMONIC
        writeHeader1( "Harmonic Minor Related Scales" );

        writeHeader2( "Harmonic Minor Scale" );
        writeScore(  "harmonic-01",                  "do(do,re,me,fa,sol,le,ti)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
        writeHeader2( "Locrian \\natural 13th Scale" );
        writeScore(  "harmonic-02",                  "do(re,me,fa,sol,le,ti,do)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
        writeHeader2( "Ionian \\sharp 5th Scale" );
        writeScore(  "harmonic-03",                  "do(me,fa,sol,le,ti,do,re)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
        writeHeader2( "Dorian \\sharp 11th Scale" );
        writeScore(  "harmonic-04",                  "do(fa,sol,le,ti,do,re,me)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
        writeHeader2( "Phrygian Major Scale ( Harmonic Minor Perfect 5th Below )" );
        writeTextBody( "(Mixolydian \\cflat 9th \\cflat 13th)" );
        writeScore(  "harmonic-05",                  "do(sol,le,ti,do,re,me,fa)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
        writeHeader2( "Lydian \\sharp 9th Scale ( Super Locrian Scale )" );
        writeScore(  "harmonic-06",                  "do(le,ti,do,re,me,fa,sol)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
        writeHeader2( "Ionian Diminished 7th Scale ( Altered Scale )" );
        writeScore(  "harmonic-07",                  "do(ti,do,re,me,fa,sol,le)  1 2 3 4 5 6 7 1 s 1 7 6 5 4 3 2 1"                           );
    }
}

writeHeader0( "Intervals on Scales" );
// TODO
writeTextBody( 
        "This section introduces some exercises to build fluency. " +
        COMMON_WORD_01
    );
{
    ditk.exec( "do re me fa sol la te"        , "Dorian Scale"                      );
    ditk.exec( "do re me fa se le la ti"      , "Diminished Scale"                  );
    ditk.exec( "do re me fa sol la ti"        , "Melodic Minor Scale"               );
    ditk.exec( "do re me fa sol le ti"        , "Harmonic Minor Scale"              );
    ditk.exec( "do re me fi sol la ti"        , "Melodic Minor \\sharp 11 Scale"    );
    ditk.exec( "do re mi fi si li"            , "Wholetone Scale"                   );
    ditk.exec( "do me mi sol le ti"           , "Augumented Scale"                  );
    ditk.exec( "do re me mi se sol le te ti"  , "Augumented Minor Major 7th Scale"  );
    ditk.exec( "do re me mi se le la te"      , "Augumented Natural 13th Scale"     );
}


if ( false ) {
    writeHeader0( "Advanced Exercises" );
    // TODO
    writeTextBody( 
            "This section introduces some exercises to build fluency. " +
            "Read them aloud repeatedly until you can recite without seeing the actual spells."
        );
    {
    }
}

if ( false ) {
    writeHeader0( `Conclusion` );
    t_textBody`Conclusion.  `;
}

// vim: spell expandtab filetype=javascript foldmethod=manual fo+=a:
